const App = getApp(); import wxParse from '../../../wxParse/wxParse.js'; import util from '../../../utils/util.js'; import CountDown from '../../../utils/countdown.js'; import ActiveStatusEnum from '../../../utils/enum/sharp/GoodsStatus.js'; let goodsSpecArr = []; Page({ data: { indicatorDots: true, autoplay: true, interval: 3000, duration: 800, currentIndex: 1, floorstatus: false, seckill_price: 0, original_price: 0, seckill_stock: 0, goods_num: 1, goods_sku_id: 0, cart_total_num: 0, goodsMultiSpec: {}, ActiveStatusEnum, share: { show: false, cancelWithMask: true, cancelText: '关闭', actions: [{ name: '生成商品海报', className: 'action-class', loading: false }, { name: '发送给朋友', openType: 'share' }], showPopup: false, }, showTopWidget: false, actEndTimeList: [], active: {}, goods: {}, }, onLoad(options) { let _this = this, scene = App.getSceneData(options); _this.setData({ active_time_id: options.active_time_id ? options.active_time_id : scene.aid, sharp_goods_id: options.sharp_goods_id ? options.sharp_goods_id : scene.gid, }); _this.getActiveDetail() }, onShow(options) { }, getActiveDetail() { let _this = this; App._get('sharp.goods/detail', { active_time_id: _this.data.active_time_id, sharp_goods_id: _this.data.sharp_goods_id, }, (result) => { let data = _this._initData(result.data); _this.setData(data); CountDown.onSetTimeList(_this, 'actEndTimeList') }) }, _initData(data) { let _this = this; let goodsDetail = data.goods; if (goodsDetail.content.length > 0) { wxParse.wxParse('content', 'html', goodsDetail.content, _this, 0) } data.goods_sku_id = goodsDetail.goods_sku.spec_sku_id; data.seckill_price = goodsDetail.goods_sku.seckill_price; data.original_price = goodsDetail.goods_sku.original_price; data.seckill_stock = goodsDetail.goods_sku.seckill_stock; data.skuCoverImage = goodsDetail.goods_image; if (goodsDetail.spec_type == 20 && goodsDetail.goods_sku['image']) { data.skuCoverImage = goodsDetail.goods_sku['image']['file_path'] } if (goodsDetail.spec_type == 20) { data.goodsMultiSpec = _this._initManySpecData(goodsDetail.goods_multi_spec) } data.actEndTimeList = [{ date: data.active.active_status == ActiveStatusEnum.STATE_SOON.value ? data.active.start_time : data.active.end_time }]; return data }, _initManySpecData(data) { goodsSpecArr = []; for (let i in data.spec_attr) { for (let j in data.spec_attr[i].spec_items) { if (j < 1) { data.spec_attr[i].spec_items[0].checked = true; goodsSpecArr[i] = data.spec_attr[i].spec_items[0].item_id } } } return data }, onSwitchSpec(e) { let _this = this, attrIdx = e.currentTarget.dataset.attrIdx, itemIdx = e.currentTarget.dataset.itemIdx, goodsMultiSpec = _this.data.goodsMultiSpec; App.saveFormId(e.detail.formId); for (let i in goodsMultiSpec.spec_attr) { for (let j in goodsMultiSpec.spec_attr[i].spec_items) { if (attrIdx == i) { goodsMultiSpec.spec_attr[i].spec_items[j].checked = false; if (itemIdx == j) { goodsMultiSpec.spec_attr[i].spec_items[itemIdx].checked = true; goodsSpecArr[i] = goodsMultiSpec.spec_attr[i].spec_items[itemIdx].item_id } } } } _this.setData({ goodsMultiSpec }); _this._updateSpecGoods() }, _updateSpecGoods() { let _this = this, specSkuId = goodsSpecArr.join('_'); let spec_list = _this.data.goodsMultiSpec.spec_list, skuItem = spec_list.find((val) => { return val.spec_sku_id == specSkuId }); if (typeof skuItem === 'object') { _this.setData({ goods_sku_id: skuItem.spec_sku_id, seckill_price: skuItem.form.seckill_price, original_price: skuItem.form.original_price, seckill_stock: skuItem.form.seckill_stock, skuCoverImage: skuItem.form.image_id > 0 ? skuItem.form.image_path : _this.data.goods.goods_image }) } }, setCurrent(e) { let _this = this; _this.setData({ currentIndex: e.detail.current + 1 }) }, onPreviewImages(e) { let _this = this; let index = e.currentTarget.dataset.index, imageUrls = []; _this.data.goods.image.forEach(item => { imageUrls.push(item.file_path) }); wx.previewImage({ current: imageUrls[index], urls: imageUrls }) }, onPreviewSkuImage(e) { let _this = this; wx.previewImage({ current: _this.data.skuCoverImage, urls: [_this.data.skuCoverImage] }) }, onTargetToComment() { let _this = this; wx.navigateTo({ url: `../../goods/comment/comment?goods_id=${_this.data.goods.goods_id}` }) }, onScrollTop(t) { let _this = this; _this.setData({ scrollTop: 0 }) }, onScrollEvent(e) { let _this = this; _this.setData({ showTopWidget: e.detail.scrollTop > 200 }) }, onClickShare(e) { let _this = this; App.saveFormId(e.detail.formId); _this.setData({ 'share.show': true }) }, onCloseShare() { let _this = this; _this.setData({ 'share.show': false }) }, onClickShareItem(e) { let _this = this; if (e.detail.index === 0) { _this._showPoster() } _this.onCloseShare() }, onTogglePopup() { let _this = this; _this.setData({ 'share.showPopup': !_this.data.share.showPopup }) }, _showPoster() { let _this = this; wx.showLoading({ title: '加载中', }); App._get('sharp.goods/poster', { active_time_id: _this.data.active_time_id, sharp_goods_id: _this.data.sharp_goods_id, }, (result) => { _this.setData(result.data, () => { _this.onTogglePopup() }) }, null, () => { wx.hideLoading() }) }, onSavePoster(e) { let _this = this; App.saveFormId(e.detail.formId); wx.showLoading({ title: '加载中', }); wx.downloadFile({ url: _this.data.qrcode, success(res) { wx.hideLoading(); wx.saveImageToPhotosAlbum({ filePath: res.tempFilePath, success(data) { wx.showToast({ title: '保存成功', icon: 'success', duration: 2000 }); _this.onTogglePopup() }, fail(err) { if (err.errMsg === 'saveImageToPhotosAlbum:fail auth deny') { wx.showToast({ title: "请允许访问相册后重试", icon: "none", duration: 1000 }); setTimeout(() => { wx.openSetting() }, 1000) } }, complete(res) { } }) } }) }, onIncGoodsNumber(e) { let _this = this; App.saveFormId(e.detail.formId); _this.setData({ goods_num: ++_this.data.goods_num }) }, onDecGoodsNumber(e) { let _this = this; App.saveFormId(e.detail.formId); if (_this.data.goods_num > 1) { _this.setData({ goods_num: --_this.data.goods_num }) } }, onInputGoodsNum(e) { let _this = this, iptValue = e.detail.value; if (!util.isPositiveInteger(iptValue) && iptValue !== '') { iptValue = 1 } _this.setData({ goods_num: iptValue }) }, onToggleTrade(e) { let _this = this; if (typeof e === 'object') { e.detail.hasOwnProperty('formId') && App.saveFormId(e.detail.formId) } _this.setData({ showBottomPopup: !_this.data.showBottomPopup }) }, onCheckout(e) { let _this = this; App.saveFormId(e.detail.formId); if (!_this._onVerify()) { return false } wx.navigateTo({ url: '../../flow/checkout?' + util.urlEncode({ order_type: 'sharp', active_time_id: _this.data.active_time_id, sharp_goods_id: _this.data.sharp_goods_id, goods_sku_id: _this.data.goods_sku_id, goods_num: _this.data.goods_num, }), success() { _this.onToggleTrade() } }) }, _onVerify() { let _this = this; if (_this.data.goods_num === '') { App.showError('请输入购买数量'); return false } _this.setData({ goods_num: parseInt(_this.data.goods_num) }); if (_this.data.goods_num <= 0) { App.showError('购买数量不能为0'); return false } return true }, onTargetHome(e) { App.saveFormId(e.detail.formId); wx.switchTab({ url: '../../index/index', }) }, onShareAppMessage() { let _this = this; let params = App.getShareUrlParams({ active_time_id: _this.data.active_time_id, sharp_goods_id: _this.data.sharp_goods_id, }); return { title: _this.data.detail.goods_name, path: `/pages/sharp/goods/index?${params}` } }, })