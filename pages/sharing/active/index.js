const App = getApp(); const Sharing = require('../../../utils/extend/sharing.js'); const Dialog = require('../../../components/dialog/dialog'); const util = require('../../../utils/util.js'); let goodsSpecArr = []; Page({ data: { detail: {}, goodsList: [], setting: {}, is_join: false, is_creator: false, goods_price: 0, line_price: 0, stock_num: 0, goods_num: 1, goods_sku_id: 0, goodsMultiSpec: {}, countDownList: [], actEndTimeList: [] }, onLoad(option) { let _this = this; _this.getActiveDetail(option.active_id); _this.getSetting() }, getActiveDetail(active_id) { let _this = this; App._get('sharing.active/detail', { active_id }, result => { _this.createPageData(result.data) }) }, createPageData(data) { let _this = this; let goodsDetail = data.goods; data['is_join'] = _this.checkUserIsJoin(data.detail.users); data['is_creator'] = !!(data.detail.creator_id == App.getUserId()); data['actEndTimeList'] = [data.detail.end_time.text]; data.goods_sku_id = goodsDetail.goods_sku.spec_sku_id; data.sharing_price = goodsDetail.goods_sku.sharing_price; data.goods_price = goodsDetail.goods_sku.goods_price; data.line_price = goodsDetail.goods_sku.line_price; data.stock_num = goodsDetail.goods_sku.stock_num; data.skuCoverImage = goodsDetail.goods_image; if (goodsDetail.spec_type == 20 && goodsDetail.goods_sku['image']) { data.skuCoverImage = goodsDetail.goods_sku['image']['file_path'] } if (goodsDetail.spec_type == 20) { data.goodsMultiSpec = _this._initGoodsDetailData(goodsDetail.goods_multi_spec) } _this.setData(data); _this.onCountDown() }, _initGoodsDetailData(data) { goodsSpecArr = []; for (let i in data.spec_attr) { for (let j in data.spec_attr[i].spec_items) { if (j < 1) { data.spec_attr[i].spec_items[0].checked = true; goodsSpecArr[i] = data.spec_attr[i].spec_items[0].item_id } } } return data }, onSwitchSpec(e) { let _this = this, attrIdx = e.currentTarget.dataset.attrIdx, itemIdx = e.currentTarget.dataset.itemIdx, goodsMultiSpec = _this.data.goodsMultiSpec; App.saveFormId(e.detail.formId); for (let i in goodsMultiSpec.spec_attr) { for (let j in goodsMultiSpec.spec_attr[i].spec_items) { if (attrIdx == i) { goodsMultiSpec.spec_attr[i].spec_items[j].checked = false; if (itemIdx == j) { goodsMultiSpec.spec_attr[i].spec_items[itemIdx].checked = true; goodsSpecArr[i] = goodsMultiSpec.spec_attr[i].spec_items[itemIdx].item_id } } } } _this.setData({ goodsMultiSpec }); _this._updateSpecGoods() }, _updateSpecGoods() { let _this = this, specSkuId = goodsSpecArr.join('_'); let spec_list = _this.data.goodsMultiSpec.spec_list, skuItem = spec_list.find((val) => { return val.spec_sku_id == specSkuId }); if (typeof skuItem === 'object') { _this.setData({ goods_sku_id: skuItem.spec_sku_id, goods_price: skuItem.form.goods_price, sharing_price: skuItem.form.sharing_price, line_price: skuItem.form.line_price, stock_num: skuItem.form.stock_num, skuCoverImage: skuItem.form.image_id > 0 ? skuItem.form.image_path : _this.data.goods.goods_image }) } }, checkUserIsJoin(users) { let user_id = App.getUserId(); if (!user_id) { return false } let isJoin = false; users.forEach((item) => { user_id == item.user_id && (isJoin = true) }); return isJoin }, getSetting() { let _this = this; Sharing.getSetting(setting => { _this.setData({ setting }) }) }, timeFormat(param) { return param < 10 ? '0' + param : param }, onCountDown() { let newTime = new Date().getTime(); let endTimeList = this.data.actEndTimeList; let countDownArr = []; endTimeList.forEach(o => { let endTime = new Date(util.format_date(o)).getTime(); let obj = null; if (endTime - newTime > 0) { let time = (endTime - newTime) / 1000; let day = parseInt(time / (60 * 60 * 24)); let hou = parseInt(time % (60 * 60 * 24) / 3600); let min = parseInt(time % (60 * 60 * 24) % 3600 / 60); let sec = parseInt(time % (60 * 60 * 24) % 3600 % 60); obj = { day: day, hou: this.timeFormat(hou), min: this.timeFormat(min), sec: this.timeFormat(sec) } } else { obj = { day: '00', hou: '00', min: '00', sec: '00' } } countDownArr.push(obj) }); this.setData({ countDownList: countDownArr }); setTimeout(this.onCountDown, 1000) }, onTargetRules() { wx.navigateTo({ url: '../rules/index', }) }, onToggleRules() { let _this = this; Dialog({ title: '拼团规则', message: _this.data.setting.basic.rule_detail, selector: '#zan-base-dialog', buttons: [{ text: '关闭', color: 'red', type: 'cash' }] }) }, onTargetGoods(e) { let goodsId = e.currentTarget.dataset.id > 0 ? e.currentTarget.dataset.id : this.data.detail.goods_id; wx.navigateTo({ url: '../goods/index?goods_id=' + goodsId, }) }, onIncGoodsNumber(e) { let _this = this; App.saveFormId(e.detail.formId); _this.setData({ goods_num: ++_this.data.goods_num }) }, onDecGoodsNumber(e) { let _this = this; App.saveFormId(e.detail.formId); if (_this.data.goods_num > 1) { _this.setData({ goods_num: --_this.data.goods_num }) } }, onInputGoodsNum(e) { let _this = this, iptValue = e.detail.value; if (!util.isPositiveInteger(iptValue) && iptValue !== '') { iptValue = 1 } _this.setData({ goods_num: iptValue }) }, onCheckout(e) { let _this = this; if (!_this._onVerify()) { return false } wx.navigateTo({ url: '../checkout/index?' + util.urlEncode({ order_type: 20, active_id: _this.data.detail.active_id, goods_id: _this.data.goods.goods_id, goods_num: _this.data.goods_num, goods_sku_id: _this.data.goods_sku_id, }) }) }, _onVerify() { let _this = this; if (_this.data.goods_num === '') { App.showError('请输入购买数量'); return false } _this.setData({ goods_num: parseInt(_this.data.goods_num) }); if (_this.data.goods_num <= 0) { App.showError('购买数量不能为0'); return false } return true }, onPreviewSkuImage(e) { let _this = this; wx.previewImage({ current: _this.data.image_path, urls: [_this.data.image_path] }) }, onShareAppMessage() { let _this = this; let params = App.getShareUrlParams({ 'active_id': _this.data.detail.active_id }); return { title: _this.data.goods.goods_name, path: "/pages/sharing/active/index?" + params } }, onToggleTrade(e) { this.setData({ showBottomPopup: !this.data.showBottomPopup }) }, onTriggerOrder(e) { let _this = this; _this.onToggleTrade() }, onTargetIndex(e) { wx.navigateTo({ url: '../index/index', }) }, })