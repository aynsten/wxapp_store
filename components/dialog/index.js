'use strict'; var _f = function _f() { }; var needResponseOpenTypes = ['getUserInfo', 'getPhoneNumber', 'openSetting']; Component({ properties: {}, data: { title: '', buttons: [], message: ' ', selector: '#zan-dialog', isScroll: false, buttonsShowVertical: false, showConfirmButton: true, confirmButtonText: '确定', confirmButtonColor: '#3CC51F', showCancelButton: false, cancelButtonText: '取消', cancelButtonColor: '#333', key: '', autoClose: true, show: false, showCustomBtns: false, promiseFunc: {}, openTypePromiseFunc: {} }, methods: { handleButtonClick: function handleButtonClick(e) { var _this = this; var _e$currentTarget = e.currentTarget, currentTarget = _e$currentTarget === undefined ? {} : _e$currentTarget; var _currentTarget$datase = currentTarget.dataset, dataset = _currentTarget$datase === undefined ? {} : _currentTarget$datase; var _ref = this.data.promiseFunc || {}, _ref$resolve = _ref.resolve, resolve = _ref$resolve === undefined ? _f : _ref$resolve, _ref$reject = _ref.reject, reject = _ref$reject === undefined ? _f : _ref$reject; if (this.data.autoClose) { this.setData({ show: false }) } if (this.data.showCustomBtns) { var isNeedOpenDataButton = needResponseOpenTypes.indexOf(dataset.openType) > -1; var resolveData = { type: dataset.type }; if (isNeedOpenDataButton) { resolveData.openDataPromise = new Promise(function (resolve, reject) { _this.setData({ openTypePromiseFunc: { resolve: resolve, reject: reject } }) }); resolveData.hasOpenDataPromise = true } resolve(resolveData); return } if (dataset.type === 'confirm') { resolve({ type: 'confirm' }) } else { reject({ type: 'cancel' }) } this.setData({ promiseFunc: {} }) }, handleUserInfoResponse: function handleUserInfoResponse(_ref2) { var detail = _ref2.detail; this.__handleOpenDataResponse({ type: detail.errMsg === 'getUserInfo:ok' ? 'resolve' : 'reject', data: detail }) }, handlePhoneResponse: function handlePhoneResponse(_ref3) { var detail = _ref3.detail; this.__handleOpenDataResponse({ type: detail.errMsg === 'getPhoneNumber:ok' ? 'resolve' : 'reject', data: detail }) }, handleOpenSettingResponse: function handleOpenSettingResponse(_ref4) { var detail = _ref4.detail; this.__handleOpenDataResponse({ type: detail.errMsg === 'openSetting:ok' ? 'resolve' : 'reject', data: detail }) }, __handleOpenDataResponse: function __handleOpenDataResponse(_ref5) { var _ref5$type = _ref5.type, type = _ref5$type === undefined ? 'resolve' : _ref5$type, _ref5$data = _ref5.data, data = _ref5$data === undefined ? {} : _ref5$data; var promiseFuncs = this.data.openTypePromiseFunc || {}; var responseFunc = promiseFuncs[type] || _f; responseFunc(data); this.setData({ openTypePromiseFunc: null }) } } });