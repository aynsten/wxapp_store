'use strict'; var defaultData = require('./data'); function getDialogCtx(_ref) { var selector = _ref.selector, pageCtx = _ref.pageCtx; var ctx = pageCtx; if (!ctx) { var pages = getCurrentPages(); ctx = pages[pages.length - 1] } return ctx.selectComponent(selector) } function getParsedOptions() { var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}; return Object.assign({ buttons: [] }, defaultData, options) } function Dialog(options, pageCtx) { var parsedOptions = getParsedOptions(options); var dialogCtx = getDialogCtx({ selector: parsedOptions.selector, pageCtx: pageCtx }); if (!dialogCtx) { console.error('无法找到对应的dialog组件，请于页面中注册并在 wxml 中声明 dialog 自定义组件'); return Promise.reject({ type: 'component error' }) } var _parsedOptions$button = parsedOptions.buttons, buttons = _parsedOptions$button === undefined ? [] : _parsedOptions$button; var showCustomBtns = false; if (buttons.length === 0) { if (parsedOptions.showConfirmButton) { buttons.push({ type: 'confirm', text: parsedOptions.confirmButtonText, color: parsedOptions.confirmButtonColor }) } if (parsedOptions.showCancelButton) { var cancelButton = { type: 'cancel', text: parsedOptions.cancelButtonText, color: parsedOptions.cancelButtonColor }; if (parsedOptions.buttonsShowVertical) { buttons.push(cancelButton) } else { buttons.unshift(cancelButton) } } } else { showCustomBtns = true } return new Promise(function (resolve, reject) { dialogCtx.setData(Object.assign({}, parsedOptions, { buttons: buttons, showCustomBtns: showCustomBtns, key: '' + new Date().getTime(), show: true, promiseFunc: { resolve: resolve, reject: reject }, openTypePromiseFunc: null })) }) } Dialog.close = function (options, pageCtx) { var parsedOptions = getParsedOptions(options); var dialogCtx = getDialogCtx({ selector: parsedOptions.selector, pageCtx: pageCtx }); if (!dialogCtx) { return } dialogCtx.setData({ show: false, promiseFunc: null, openTypePromiseFunc: null }) }; module.exports = Dialog;